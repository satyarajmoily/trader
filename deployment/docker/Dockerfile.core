# Multi-stage Dockerfile for Bitcoin Predictor Core System
# Phase 5: Production Deployment

# Stage 1: Builder
FROM python:3.9-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install dependencies
COPY requirements.txt /tmp/
RUN pip install --upgrade pip && \
    pip install -r /tmp/requirements.txt

# Stage 2: Production
FROM python:3.9-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH"

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Create app user for security
RUN useradd --create-home --shell /bin/bash app

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=app:app bitcoin_predictor/ bitcoin_predictor/
COPY --chown=app:app main.py .
COPY --chown=app:app mock_bitcoin_data.csv .

# Create directories for logs and data
RUN mkdir -p logs data backups && \
    chown -R app:app logs data backups

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python3 -c "from bitcoin_predictor.main import test_core_system; exit(0 if test_core_system() else 1)"

# Switch to app user
USER app

# Expose port (if needed for future API)
EXPOSE 8000

# Default command
CMD ["python3", "main.py", "core", "predict"] 